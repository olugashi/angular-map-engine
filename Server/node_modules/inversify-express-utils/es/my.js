var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import "reflect-metadata";
import { expect } from "chai";
import * as express from "express";
import { Container, injectable, inject } from "inversify";
import { InversifyExpressServer, controller, httpGet, BaseMiddleware, BaseHttpController } from "../src/index";
import * as path from "path";
var server;
var container;
container = new Container();
var TYPES = {
    LoggerMiddleware: Symbol("LoggerMiddleware"),
    SomeDependency: Symbol("SomeDependency")
};
var Principal = /** @class */ (function () {
    function Principal(details) {
        this.details = details;
    }
    Principal.prototype.isAuthenticated = function () {
        return Promise.resolve(true);
    };
    Principal.prototype.isResourceOwner = function (resourceId) {
        return Promise.resolve(resourceId === 1111);
    };
    Principal.prototype.isInRole = function (role) {
        return Promise.resolve(role === "admin");
    };
    return Principal;
}());
var CustomAuthProvider = /** @class */ (function () {
    function CustomAuthProvider() {
    }
    CustomAuthProvider.prototype.getUser = function (req, res, next) {
        var principal = new Principal({
            email: "test@test.com"
        });
        return Promise.resolve(principal);
    };
    CustomAuthProvider = __decorate([
        injectable()
    ], CustomAuthProvider);
    return CustomAuthProvider;
}());
var logEntries = [];
var LoggerMiddleware = /** @class */ (function (_super) {
    __extends(LoggerMiddleware, _super);
    function LoggerMiddleware() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LoggerMiddleware.prototype.handler = function (req, res, next) {
        var email = this.httpContext.user.details.email;
        logEntries.push(email + " => " + req.url + " " + this._someDependency.name);
        next();
    };
    __decorate([
        inject(TYPES.SomeDependency),
        __metadata("design:type", Object)
    ], LoggerMiddleware.prototype, "_someDependency", void 0);
    LoggerMiddleware = __decorate([
        injectable()
    ], LoggerMiddleware);
    return LoggerMiddleware;
}(BaseMiddleware));
var TestController = /** @class */ (function (_super) {
    __extends(TestController, _super);
    function TestController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TestController.prototype.getTest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var email, isAuthenticated;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.httpContext.user !== null)) return [3 /*break*/, 2];
                        email = this.httpContext.user.details.email;
                        return [4 /*yield*/, this.httpContext.user.isAuthenticated()];
                    case 1:
                        isAuthenticated = _a.sent();
                        expect(isAuthenticated).eq(true);
                        return [2 /*return*/, "" + email];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        httpGet("/testUrl", TYPES.LoggerMiddleware),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], TestController.prototype, "getTest", null);
    TestController = __decorate([
        controller("/", function (req, res, next) {
            logEntries.push("Hello from controller!");
            next();
        })
    ], TestController);
    return TestController;
}(BaseHttpController));
container.bind(TYPES.SomeDependency)
    .toConstantValue({ name: "SomeDependency!" });
container.bind(TYPES.LoggerMiddleware)
    .to(LoggerMiddleware);
server = new InversifyExpressServer(container, null, null, null, CustomAuthProvider);
var app = server.build();
app.use("/", express.static(path.resolve(__dirname + "/../", "app")));
app.listen(3000);
